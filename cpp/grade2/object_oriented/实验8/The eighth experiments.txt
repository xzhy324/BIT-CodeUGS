1.为了满足用户对快递运费和实效的不同需求，某快递公司根据海运、陆地、空运三种不同的快递运输交通工具的运输成本以及运输距离，制定了相应的收费标准如下：
海运运费 ＝ 路程距离 × W11 ＋ 货物重量 × W12 + 10
陆地运费 ＝ 路程距离 × W21 ＋ 货物重量 × W22 + 30
空运运费 ＝ 路程距离 × W31 ＋ 货物重量 × W32 + 60
其中，Wij（i = 1，2，3；j = 1，2）是不同交通工具在路程距离和货物重量的权重，分别取值为（1.05，0.95）、（1.25，1.1）和（1.55，1.3）。
请根据快递公司制定的标准，设计类并实现快递费用的计算。


// 各类不同运输工具的根节点类
class CVehicle
{
public:
		// 通过构造函数设置运输工具在路程距离和货物重量的权值
		CVehicle(double paraDistance, double paraWeight)
		{  
				SetParameters(paraDistance, paraWeight);  
		}

		virtual ~CVehicle() = 0 {  cout << "~CVehicle" << endl;  }

		// 设置运输工具路程距离和货物重量的权值
		void SetParameters(double paraDistance, double paraWeight)
		{
			  m_dParaDistance = paraDistance;
			m_dParaWeight = paraWeight; 
		}

		// 运输费用计算的统一接口
		virtual double Freight(double distance, double weight) = 0;

protected:
		double m_dParaDistance, m_dParaWeight;      // 路程距离和重量对应的权重
};


void main()
{
		CVehicle *vehicle[3];             
		// 动态生成三个派生类对象
		vehicle[0] = new CShip(1.05, 0.95);     
		vehicle[1] = new CTruck(1.25, 1.1);     
		vehicle[2] = new CPlane(1.55, 1.3);     
		CFreight freight;
		int i = 0;
		for (i = 0; i<3; i++)
		{
				// 设置不同的运输工具对象，这些对象以统一的运输费用接口方式来访问
				freight.SetVehicle(vehicle[i]);     
				cout << typeid(*vehicle[i]).name() << "：" << freight.GetPrice(1000, 20); 
		}
		// 释放动态生成的对象
		for (i=0; i<3; i++)	
		{  
				If (vehicle[i] != NULL )  delete vehicle[i];
		}
}




2.很多家庭都养了多种宠物。假定一个家庭能饲养任意种类型的宠物，每种类型的宠物数量也是任意的，但家庭能饲养的宠物总数固定的，例如共10只宠物。
请利用面向对象多态性机制，设计程序，使得通过该程序能获知家庭中养了哪些类型的宠物，每种类型宠物的数量各有多少，以及不同类型宠物叫声（以文字方式模拟显示）。
假定家庭饲养三种类型的宠物：Sparrow、Dog、Cat

